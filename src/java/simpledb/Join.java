package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private final JoinPredicate predicate;
    private OpIterator[] opIterators;
	private Tuple leftChild;

	/**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
    	this.predicate = p;
    	this.opIterators = new OpIterator[2];
    	this.opIterators[0] = child1;
    	this.opIterators[1] = child2;
    }

    public JoinPredicate getJoinPredicate() {
    	return predicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
    	return this.opIterators[0].getTupleDesc().getFieldName(this.predicate.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
    	return this.opIterators[1].getTupleDesc().getFieldName(this.predicate.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
    	return TupleDesc.merge(this.opIterators[0].getTupleDesc(), this.opIterators[1].getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
	    super.open();
    	this.opIterators[0].open();
    	this.opIterators[1].open();
    }

    public void close() {
		super.close();
		this.opIterators[0].close();
		this.opIterators[1].close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
    	this.opIterators[0].rewind();
    	this.opIterators[1].rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
    	while (true) {
		    if (this.leftChild == null) {
			    if (this.opIterators[0].hasNext()) {
				    this.leftChild = this.opIterators[0].next();
				    this.opIterators[1].rewind();
			    } else {
				    return null;
			    }
		    }
		    while (this.opIterators[1].hasNext()) {
			    final Tuple rightNext = this.opIterators[1].next();
			    if (predicate.filter(leftChild, rightNext)) {
				    final TupleDesc tupleDesc = getTupleDesc();
				    final Tuple tuple = new Tuple(tupleDesc);
				    final Iterator<Field> fields = leftChild.fields();
				    final Iterator<Field> fields1 = rightNext.fields();
				    int i = 0;
				    while (fields.hasNext()) {
					    tuple.setField(i, fields.next());
					    i += 1;
				    }
				    while (fields1.hasNext()) {
					    tuple.setField(i, fields1.next());
					    i += 1;
				    }
				    return tuple;
			    }
		    }
		    this.leftChild = null;
	    }
    }

	@Override
	public OpIterator[] getChildren() {
		return opIterators;
	}

	@Override
	public void setChildren(OpIterator[] children) {
		assert children.length == 2;
		this.opIterators = children;
	}

}
